{"version":3,"sources":["index.coffee"],"names":[],"mappings":"AAAA,IAAA,2CAAA;EAAA,gBAAA;;AAAA,OAAA,CAAQ,oBAAR,CAA6B,CAAC,OAA9B,CAAA,CAAA,CAAA;;AAAA,MAEgB,OAAA,CAAQ,eAAR,CAAhB,EAAC,WAAA,IAAD,EAAO,YAAA,KAFP,CAAA;;AAAA,KAGA,GAAQ,OAAA,CAAQ,cAAR,CAHR,CAAA;;AAAA,GAMA,GAAM,SAAC,GAAD,EAAM,IAAN,EAAY,EAAZ,GAAA;SACJ,IAAA,CAAK,GAAL,EAAU,IAAV,EAAgB,SAAC,GAAD,EAAM,MAAN,EAAc,MAAd,GAAA;AACd,IAAA,IAAgC,MAAhC;AAAA,MAAA,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,MAArB,CAAA,CAAA;KAAA;AACA,IAAA,IAAG,GAAA,KAAS,IAAZ;aACE,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,SAAL,CAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAd,EADF;KAAA,MAEK,IAAG,UAAH;aACH,EAAA,CAAG,MAAH,EADG;KAAA,MAAA;aAGH,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,MAArB,EAHG;KAJS;EAAA,CAAhB,EADI;AAAA,CANN,CAAA;;AAAA,QAiBA,GAAW,SAAC,IAAD,GAAA;AACT,MAAA,QAAA;AAAA,EAAA,QAAA,GACE;AAAA,IAAA,MAAA,EAAQ,SAAC,IAAD,GAAA;aAAU,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAArB,EAAV;IAAA,CAAR;AAAA,IACA,MAAA,EAAQ,SAAC,IAAD,GAAA;aAAU,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAArB,EAAV;IAAA,CADR;AAAA,IAEA,KAAA,EAAO,SAAC,GAAD,EAAM,OAAN,GAAA;aAAkB,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,SAAL,CAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAd,EAAlB;IAAA,CAFP;AAAA,IAGA,KAAA,EAAO,SAAC,IAAD,EAAO,OAAP,GAAA;AACL,MAAA,IAAO,IAAA,KAAQ,CAAf;eACE,OAAO,CAAC,GAAR,CAAY,QAAA,GAAS,OAAO,CAAC,GAAjB,GAAqB,wBAArB,GAA6C,IAA7C,GAAkD,GAA9D,EADF;OADK;IAAA,CAHP;GADF,CAAA;AAOA,EAAA,IAAG,YAAH;WACE,KAAA,CAAM,QAAN,EAAgB,IAAhB,EADF;GAAA,MAAA;WAGE,SAHF;GARS;AAAA,CAjBX,CAAA;;AAAA,GA+BA,GAAM,SAAC,GAAD,EAAM,IAAN,GAAA;AACJ,MAAA,sCAAA;;IADU,OAAO;GACjB;AAAA,EAAA,IAAA,GAAO,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAP,CAAA;AAAA,EACA,OAAA,GAAU,IAAI,CAAC,KAAL,CAAA,CADV,CAAA;AAAA,EAEA,OAAA,GAAU,QAAA,CAAS,IAAI,CAAC,QAAd,CAFV,CAAA;AAAA,EAGA,OAAA,GAAU;AAAA,IAAA,KAAA,EAAO,GAAP;GAHV,CAAA;AAAA,EAIA,KAAA,GAAQ,KAAA,CAAM,OAAN,EAAe,IAAf,EAAqB,IAArB,CAJR,CAAA;AAAA,EAKA,KAAK,CAAC,MAAM,CAAC,EAAb,CAAgB,MAAhB,EAAwB,SAAC,IAAD,GAAA;WAAU,OAAO,CAAC,MAAR,CAAe,IAAf,EAAV;EAAA,CAAxB,CALA,CAAA;AAAA,EAMA,KAAK,CAAC,MAAM,CAAC,EAAb,CAAgB,MAAhB,EAAwB,SAAC,IAAD,GAAA;WAAU,OAAO,CAAC,MAAR,CAAe,IAAf,EAAV;EAAA,CAAxB,CANA,CAAA;AAAA,EAOA,KAAK,CAAC,EAAN,CAAS,OAAT,EAAkB,SAAC,GAAD,GAAA;WAAS,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,OAAnB,EAAT;EAAA,CAAlB,CAPA,CAAA;SAQA,KAAK,CAAC,EAAN,CAAS,OAAT,EAAkB,SAAC,IAAD,GAAA;WAAU,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,OAApB,EAAV;EAAA,CAAlB,EATI;AAAA,CA/BN,CAAA;;AAAA,MA0CM,CAAC,OAAP,GAAiB,SAAA,GAAA;AACf,MAAA,YAAA;AAAA,EADgB,oBAAK,4DACrB,CAAA;AAAA,EAAA,CAAA,GAAI,IAAI,CAAC,MAAT,CAAA;AACA,EAAA,IAAG,CAAA,GAAI,CAAP;AACE,IAAA,IAAG,MAAA,CAAA,IAAY,CAAA,CAAA,GAAI,CAAJ,CAAZ,KAAsB,UAAzB;AACE,MAAA,IAAG,CAAA,KAAK,CAAR;eACE,GAAA,CAAI,GAAJ,EAAS,EAAT,EAAa,IAAK,CAAA,CAAA,CAAlB,EADF;OAAA,MAAA;eAIE,GAAA,CAAI,GAAJ,EAAS,IAAK,CAAA,CAAA,CAAd,EAAkB,IAAK,CAAA,CAAA,GAAI,CAAJ,CAAvB,EAJF;OADF;KAAA,MAAA;aAQE,GAAA,CAAI,GAAJ,EAAS,IAAK,CAAA,CAAA,CAAd,EARF;KADF;GAAA,MAAA;WAWE,GAAA,CAAI,GAAJ,EAXF;GAFe;AAAA,CA1CjB,CAAA","file":"index.js","sourceRoot":"/source/","sourcesContent":["require(\"source-map-support\").install()\n\n{exec, spawn} = require(\"child_process\")\nmerge = require(\"lodash.merge\")\n\n# exec #simple\nexe = (cmd, opts, cb) ->\n  exec cmd, opts, (err, stdout, stderr) ->\n    process.stderr.write(stderr) if stderr\n    if err isnt null\n      console.trace JSON.stringify(err, null, 2)\n    else if cb?\n      cb(stdout)\n    else\n      process.stdout.write(stdout)\n\n# event-handler defaults / overrides\nhandlers = (opts) ->\n  defaults =\n    stdout: (data) -> process.stdout.write(data)\n    stderr: (data) -> process.stderr.write(data)\n    error: (err, context) -> console.trace JSON.stringify(err, null, 2)\n    close: (code, context) ->\n      unless code is 0\n        console.log \"This `#{context.cmd}` process exited with #{code}.\"\n  if opts?\n    merge defaults, opts\n  else\n    defaults\n\n# spawn #simple\nrun = (cmd, opts = {}) ->\n  args = cmd.split /\\s+/\n  command = args.shift()\n  handles = handlers(opts.childish)\n  context = \"cmd\": cmd\n  chips = spawn(command, args, opts)\n  chips.stdout.on \"data\", (data) -> handles.stdout(data)\n  chips.stderr.on \"data\", (data) -> handles.stderr(data)\n  chips.on \"error\", (err) -> handles.error(err, context)\n  chips.on \"close\", (code) -> handles.close(code, context)\n\nmodule.exports = (cmd, args...) ->\n  n = args.length\n  if n > 0\n    if typeof args[n - 1] is \"function\"\n      if n is 1\n        exe cmd, {}, args[0]\n      else\n        # exe takes at most 3 arguments (here using the first & last of args)\n        exe cmd, args[0], args[n - 1]\n    else\n      # run takes at most 2 arguments\n      run cmd, args[0]\n  else\n    run cmd\n"]}